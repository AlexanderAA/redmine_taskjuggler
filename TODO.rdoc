= Redmine_Taskjuggler Todo

https://github.com/chris2fr/redmine_taskjuggler

This is a list of things do to for the plugin:

Done :

* Factorize code
* Migrate custom-fields to own data model
  * Augment Issues, Projects, Ressources 
  * Add fields to issue update
* Institute test procedures
* CSV import
* TJP export

Partially done :

* Go through all the code in users/christopher/draft
* Look into user/inxbil code
* TimeEntry calibrating

Todo:

* Change timeingresolution to enumeration 5, 10, 15, 30, 60min
* Initiate doc directory
* Take screen shots
* Add fields to issues views
* Manage priorities
* Add fields to Views : Project, User, TimeEntry
* Add fields to mass-edit dialogue

Backlog:

* Right-click edit

Here is a wish list for later on:

* Native integration with Taskjuggler 3 (also in Ruby whereas TJ2 was in C / QT)
  However, they seem to use different versions of Ruby (1.9.3 versus 2.0)

== Thoughts on what I am doing now by Christopher Mann

Initially used for a 22-person IT department in Redmine v.0.9 and Taskjuggler v.2, today this update was for a 4-person development team in Redmine v2.X and Taskjuggler v.3.  However ...  Well I'll finish the update anyway.

The basic idea was to use Redmine as a missing GUI for Taskjuggler, at least in tracking. At the time, my own programming was quick and dirty. I was under time pressure myself. The main error, I think, was using custom variables that needed to be manually configured in Redmine. So, as I debug for the current version of Redmine, I will also incorporate a proprietary data model into this plugin.

This plugin may have different features for different uses, especially after we fuse it with Workload. Inxbil is the first to really bring about a novel way of using integration with Redmine in a way I had not foreseen.