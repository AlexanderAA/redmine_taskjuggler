class TjstatusController < ApplicationController
unloadable

  def export
	#@issue_statuses = Issue'divers
	@issues = Issue.find(:all, :conditions => {:project_id => params[:project_id]})
	@start_status_id = IssueStatus.find(:first, :conditions =>["is_default=?", true]).id
	@Project = Project.find(:first, :conditions => {:id => params[:project_id]})
	@TimeEntries = TimeEntry.find(:all, :conditions => {:project_id => params[:project_id]}, :order => ['user_id, issue_id'])
	@Versions = Version.find(:all,:conditions => {:project_id => params[:project_id]})
	#@IssuesSansCat = Issue.find(:all, :conditions => {:project_id => params[:project_id]})
	# :project_id=params[:project_id])
  end

  def import
  end

  def index
	@projects = Project.find(:all, :active?)
  end

  def initial_export

	@Cats = IssueCategory.find(:all, :conditions => {:project_id =>params[:project_id]} );
	@Project = Project.find(:first, :conditions => {:id => params[:project_id]})
	@start_status_id = IssueStatus.find(:first, :conditions =>["is_default=?", true]).id
	@Resources = @Project.assignable_users
	@Versions = Version.find(:all,:conditions => {:project_id => params[:project_id]})
	@IssuesSansCat = Issue.find(:all, :conditions => ["project_id = " + params[:project_id] + " AND category_id IS NULL"])
	#for i in 0...@Resources.length
        #	@Resources[i].login == @Resources[i].login.sub(".","_")
      	#end

  end

  def test
	
  end

end
